{"ast":null,"code":"const API_URL = 'http://localhost:8000';\n\nasync function httpGetPlanets() {\n  // TODO: Once API is ready.\n  // Load planets and return as JSON.\n  // We use the fetch function.\n  // Our client and server are on different ports (3000 & 8000)\n  // We need to specify it when we make our requests.\n  // fetch returns a promise, so we need to await it.\n  // Because it's already async, we use await.\n  // We set it as our response, and return it as JSON.\n  // Because we are returning the JS object in our controller which is a JSON. \n  // for planets, it's an array of JS object.\n  const response = await fetch(`${API_URL}/planets`);\n  return await response.json();\n}\n\nasync function httpGetLaunches() {\n  // TODO: Once API is ready.\n  // Load launches, sort by flight number, and return as JSON.\n  const response = await fetch(`${API_URL}/launches`);\n  const fetchedLaunches = await response.json();\n  return fetchedLaunches.sort((a, b) => {\n    return a.flightNumber - b.flightNumber;\n  });\n}\n\nasync function httpSubmitLaunch(launch) {\n  // TODO: Once API is ready.\n  // Submit given launch data to launch system.\n  // when we pass in the body, the value needs to be a string\n  // but launch is an object so we modify it.\n  // Also, we need to set a header to indicate it's JSON.\n  try {\n    return await fetch(`${API_URL}/launches`, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(launch)\n    });\n  } catch (err) {\n    return {\n      ok: false\n    };\n  }\n}\n\nasync function httpAbortLaunch(id) {// TODO: Once API is ready.\n  // Delete launch with given ID.\n}\n\nexport { httpGetPlanets, httpGetLaunches, httpSubmitLaunch, httpAbortLaunch };","map":{"version":3,"sources":["/Users/cagnatolivier/code/oliviercagnat/node-nasa-project/client/src/hooks/requests.js"],"names":["API_URL","httpGetPlanets","response","fetch","json","httpGetLaunches","fetchedLaunches","sort","a","b","flightNumber","httpSubmitLaunch","launch","method","headers","body","JSON","stringify","err","ok","httpAbortLaunch","id"],"mappings":"AAAA,MAAMA,OAAO,GAAG,uBAAhB;;AAEA,eAAeC,cAAf,GAAgC;AAC9B;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,UAAZ,CAA5B;AACA,SAAO,MAAME,QAAQ,CAACE,IAAT,EAAb;AACD;;AAED,eAAeC,eAAf,GAAiC;AAC/B;AACA;AAEA,QAAMH,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,WAAZ,CAA5B;AACA,QAAMM,eAAe,GAAG,MAAMJ,QAAQ,CAACE,IAAT,EAA9B;AACA,SAAOE,eAAe,CAACC,IAAhB,CAAqB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACpC,WAAOD,CAAC,CAACE,YAAF,GAAiBD,CAAC,CAACC,YAA1B;AACD,GAFM,CAAP;AAGD;;AAED,eAAeC,gBAAf,CAAgCC,MAAhC,EAAwC;AACtC;AACA;AAEA;AACA;AACA;AACA,MAAI;AACF,WAAO,MAAMT,KAAK,CAAE,GAAEH,OAAQ,WAAZ,EAAwB;AACxCa,MAAAA,MAAM,EAAE,MADgC;AAExCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF+B;AAKxCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALkC,KAAxB,CAAlB;AAOD,GARD,CAQE,OAAMM,GAAN,EAAW;AACX,WAAO;AACLC,MAAAA,EAAE,EAAE;AADC,KAAP;AAGD;AACF;;AAED,eAAeC,eAAf,CAA+BC,EAA/B,EAAmC,CACjC;AACA;AACD;;AAED,SACEpB,cADF,EAEEI,eAFF,EAGEM,gBAHF,EAIES,eAJF","sourcesContent":["const API_URL = 'http://localhost:8000';\n\nasync function httpGetPlanets() {\n  // TODO: Once API is ready.\n  // Load planets and return as JSON.\n\n  // We use the fetch function.\n  // Our client and server are on different ports (3000 & 8000)\n  // We need to specify it when we make our requests.\n  // fetch returns a promise, so we need to await it.\n  // Because it's already async, we use await.\n  // We set it as our response, and return it as JSON.\n  // Because we are returning the JS object in our controller which is a JSON. \n  // for planets, it's an array of JS object.\n\n  const response = await fetch(`${API_URL}/planets`);\n  return await response.json();\n}\n\nasync function httpGetLaunches() {\n  // TODO: Once API is ready.\n  // Load launches, sort by flight number, and return as JSON.\n\n  const response = await fetch(`${API_URL}/launches`);\n  const fetchedLaunches = await response.json();\n  return fetchedLaunches.sort((a, b) => {\n    return a.flightNumber - b.flightNumber;\n  });\n}\n\nasync function httpSubmitLaunch(launch) {\n  // TODO: Once API is ready.\n  // Submit given launch data to launch system.\n\n  // when we pass in the body, the value needs to be a string\n  // but launch is an object so we modify it.\n  // Also, we need to set a header to indicate it's JSON.\n  try {\n    return await fetch(`${API_URL}/launches`, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(launch),\n    });\n  } catch(err) {\n    return {\n      ok: false,\n    };\n  }\n}\n\nasync function httpAbortLaunch(id) {\n  // TODO: Once API is ready.\n  // Delete launch with given ID.\n}\n\nexport {\n  httpGetPlanets,\n  httpGetLaunches,\n  httpSubmitLaunch,\n  httpAbortLaunch,\n};"]},"metadata":{},"sourceType":"module"}